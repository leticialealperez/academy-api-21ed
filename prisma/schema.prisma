generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Aluno {
  id           String    @id @default(uuid()) @db.Uuid
  nome         String    @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  idade        Int?      @db.SmallInt
  senha        String    @db.Text
  tipo         TipoAluno @default(M)
  criadoEm     DateTime  @default(now()) @map("criado_em")
  atualizadoEm DateTime  @default(now()) @updatedAt @map("atualizado_em")

  endereco   Endereco?
  projetos   Projeto[]
  matriculas Matricula[]

  @@map("alunos")
}

// 1 - 1 = Um endereço pertence unica e exclusivamente a um aluno e um aluno pode ter apenas 1 endereço vinculado a ele
model Endereco {
  id          String  @id @default(uuid()) @db.Uuid
  logradouro  String  @db.VarChar(100)
  numero      String  @db.VarChar(50)
  complemento String? @db.VarChar(50)
  cep         String  @db.VarChar(8)
  bairro      String  @db.VarChar(100)
  cidade      String  @db.VarChar(100)
  uf          String  @db.VarChar(2)
  pais        String  @db.VarChar(100)
  alunoId     String  @unique @map("aluno_id") @db.Uuid
  aluno       Aluno   @relation(fields: [alunoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("enderecos")
}

// 1 - N = Um projeto pertence à 1 único aluno, e um aluno pode ter nenhum (0) ou até inumeros projetos cadastrados
model Projeto {
  id         String        @id @default(uuid()) @db.Uuid
  titulo     String        @db.VarChar(50)
  descricao  String?       @db.Text
  ferramenta String        @db.VarChar(300)
  status     StatusProjeto
  alunoId    String        @map("aluno_id") @db.Uuid

  aluno Aluno @relation(fields: [alunoId], references: [id])

  @@map("projetos")
}

enum StatusProjeto {
  finalizado
  em_andamento
}

model Turma {
  id            String   @id @default(uuid()) @db.Uuid
  programa      String   @db.VarChar(100)
  edicao        Int      @db.SmallInt
  maxAlunos     Int      @map("max_alunos") @db.SmallInt
  criadoEm      DateTime @default(now()) @map("criado_em")
  atualizado_em DateTime @default(now()) @updatedAt @map("atualizado_em")

  matriculas Matricula[]

  @@unique([programa, edicao])
  @@map("turmas")
}

// 1 - N - Um aluno pode estar matriculado em várias turmas
// 1 - N - Uma turma pode ter vários alunos matriculados
model Matricula {
  alunoId String @map("aluno_id") @db.Uuid
  turmaId String @map("turma_id") @db.Uuid

  aluno Aluno @relation(fields: [alunoId], references: [id])
  turma Turma @relation(fields: [turmaId], references: [id])

  ativo         Boolean  @default(true) @db.Boolean
  dataMatricula DateTime @default(now()) @map("data_matricula") @db.Date

  @@id([alunoId, turmaId])
  @@map("matriculas")
}

enum TipoAluno {
  M
  F
  T
}
